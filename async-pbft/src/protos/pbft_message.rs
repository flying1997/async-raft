// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `pbft_message.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct PbftMessageInfo {
    // message fields
    pub msg_type: ::std::string::String,
    pub view: u64,
    pub seq_num: u64,
    pub signer_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PbftMessageInfo {
    fn default() -> &'a PbftMessageInfo {
        <PbftMessageInfo as ::protobuf::Message>::default_instance()
    }
}

impl PbftMessageInfo {
    pub fn new() -> PbftMessageInfo {
        ::std::default::Default::default()
    }

    // string msg_type = 1;


    pub fn get_msg_type(&self) -> &str {
        &self.msg_type
    }
    pub fn clear_msg_type(&mut self) {
        self.msg_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_msg_type(&mut self, v: ::std::string::String) {
        self.msg_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg_type(&mut self) -> &mut ::std::string::String {
        &mut self.msg_type
    }

    // Take field
    pub fn take_msg_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.msg_type, ::std::string::String::new())
    }

    // uint64 view = 2;


    pub fn get_view(&self) -> u64 {
        self.view
    }
    pub fn clear_view(&mut self) {
        self.view = 0;
    }

    // Param is passed by value, moved
    pub fn set_view(&mut self, v: u64) {
        self.view = v;
    }

    // uint64 seq_num = 3;


    pub fn get_seq_num(&self) -> u64 {
        self.seq_num
    }
    pub fn clear_seq_num(&mut self) {
        self.seq_num = 0;
    }

    // Param is passed by value, moved
    pub fn set_seq_num(&mut self, v: u64) {
        self.seq_num = v;
    }

    // bytes signer_id = 4;


    pub fn get_signer_id(&self) -> &[u8] {
        &self.signer_id
    }
    pub fn clear_signer_id(&mut self) {
        self.signer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_signer_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.signer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signer_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signer_id
    }

    // Take field
    pub fn take_signer_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signer_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for PbftMessageInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.msg_type)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.view = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.seq_num = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signer_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.msg_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.msg_type);
        }
        if self.view != 0 {
            my_size += ::protobuf::rt::value_size(2, self.view, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.seq_num != 0 {
            my_size += ::protobuf::rt::value_size(3, self.seq_num, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.signer_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.signer_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.msg_type.is_empty() {
            os.write_string(1, &self.msg_type)?;
        }
        if self.view != 0 {
            os.write_uint64(2, self.view)?;
        }
        if self.seq_num != 0 {
            os.write_uint64(3, self.seq_num)?;
        }
        if !self.signer_id.is_empty() {
            os.write_bytes(4, &self.signer_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PbftMessageInfo {
        PbftMessageInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "msg_type",
                |m: &PbftMessageInfo| { &m.msg_type },
                |m: &mut PbftMessageInfo| { &mut m.msg_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "view",
                |m: &PbftMessageInfo| { &m.view },
                |m: &mut PbftMessageInfo| { &mut m.view },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "seq_num",
                |m: &PbftMessageInfo| { &m.seq_num },
                |m: &mut PbftMessageInfo| { &mut m.seq_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signer_id",
                |m: &PbftMessageInfo| { &m.signer_id },
                |m: &mut PbftMessageInfo| { &mut m.signer_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PbftMessageInfo>(
                "PbftMessageInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PbftMessageInfo {
        static instance: ::protobuf::rt::LazyV2<PbftMessageInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PbftMessageInfo::new)
    }
}

impl ::protobuf::Clear for PbftMessageInfo {
    fn clear(&mut self) {
        self.msg_type.clear();
        self.view = 0;
        self.seq_num = 0;
        self.signer_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PbftMessageInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PbftMessageInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PbftMessage {
    // message fields
    pub info: ::protobuf::SingularPtrField<PbftMessageInfo>,
    pub block_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PbftMessage {
    fn default() -> &'a PbftMessage {
        <PbftMessage as ::protobuf::Message>::default_instance()
    }
}

impl PbftMessage {
    pub fn new() -> PbftMessage {
        ::std::default::Default::default()
    }

    // .PbftMessageInfo info = 1;


    pub fn get_info(&self) -> &PbftMessageInfo {
        self.info.as_ref().unwrap_or_else(|| <PbftMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_info(&mut self) {
        self.info.clear();
    }

    pub fn has_info(&self) -> bool {
        self.info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_info(&mut self, v: PbftMessageInfo) {
        self.info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_info(&mut self) -> &mut PbftMessageInfo {
        if self.info.is_none() {
            self.info.set_default();
        }
        self.info.as_mut().unwrap()
    }

    // Take field
    pub fn take_info(&mut self) -> PbftMessageInfo {
        self.info.take().unwrap_or_else(|| PbftMessageInfo::new())
    }

    // bytes block_id = 2;


    pub fn get_block_id(&self) -> &[u8] {
        &self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.block_id
    }

    // Take field
    pub fn take_block_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.block_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for PbftMessage {
    fn is_initialized(&self) -> bool {
        for v in &self.info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.info)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.block_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.block_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.block_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.block_id.is_empty() {
            os.write_bytes(2, &self.block_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PbftMessage {
        PbftMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PbftMessageInfo>>(
                "info",
                |m: &PbftMessage| { &m.info },
                |m: &mut PbftMessage| { &mut m.info },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "block_id",
                |m: &PbftMessage| { &m.block_id },
                |m: &mut PbftMessage| { &mut m.block_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PbftMessage>(
                "PbftMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PbftMessage {
        static instance: ::protobuf::rt::LazyV2<PbftMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PbftMessage::new)
    }
}

impl ::protobuf::Clear for PbftMessage {
    fn clear(&mut self) {
        self.info.clear();
        self.block_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PbftMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PbftMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PbftNewView {
    // message fields
    pub info: ::protobuf::SingularPtrField<PbftMessageInfo>,
    pub view_changes: ::protobuf::RepeatedField<PbftSignedVote>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PbftNewView {
    fn default() -> &'a PbftNewView {
        <PbftNewView as ::protobuf::Message>::default_instance()
    }
}

impl PbftNewView {
    pub fn new() -> PbftNewView {
        ::std::default::Default::default()
    }

    // .PbftMessageInfo info = 1;


    pub fn get_info(&self) -> &PbftMessageInfo {
        self.info.as_ref().unwrap_or_else(|| <PbftMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_info(&mut self) {
        self.info.clear();
    }

    pub fn has_info(&self) -> bool {
        self.info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_info(&mut self, v: PbftMessageInfo) {
        self.info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_info(&mut self) -> &mut PbftMessageInfo {
        if self.info.is_none() {
            self.info.set_default();
        }
        self.info.as_mut().unwrap()
    }

    // Take field
    pub fn take_info(&mut self) -> PbftMessageInfo {
        self.info.take().unwrap_or_else(|| PbftMessageInfo::new())
    }

    // repeated .PbftSignedVote view_changes = 2;


    pub fn get_view_changes(&self) -> &[PbftSignedVote] {
        &self.view_changes
    }
    pub fn clear_view_changes(&mut self) {
        self.view_changes.clear();
    }

    // Param is passed by value, moved
    pub fn set_view_changes(&mut self, v: ::protobuf::RepeatedField<PbftSignedVote>) {
        self.view_changes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_view_changes(&mut self) -> &mut ::protobuf::RepeatedField<PbftSignedVote> {
        &mut self.view_changes
    }

    // Take field
    pub fn take_view_changes(&mut self) -> ::protobuf::RepeatedField<PbftSignedVote> {
        ::std::mem::replace(&mut self.view_changes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PbftNewView {
    fn is_initialized(&self) -> bool {
        for v in &self.info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.view_changes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.info)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.view_changes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.view_changes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.view_changes {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PbftNewView {
        PbftNewView::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PbftMessageInfo>>(
                "info",
                |m: &PbftNewView| { &m.info },
                |m: &mut PbftNewView| { &mut m.info },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PbftSignedVote>>(
                "view_changes",
                |m: &PbftNewView| { &m.view_changes },
                |m: &mut PbftNewView| { &mut m.view_changes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PbftNewView>(
                "PbftNewView",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PbftNewView {
        static instance: ::protobuf::rt::LazyV2<PbftNewView> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PbftNewView::new)
    }
}

impl ::protobuf::Clear for PbftNewView {
    fn clear(&mut self) {
        self.info.clear();
        self.view_changes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PbftNewView {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PbftNewView {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PbftSignedVote {
    // message fields
    pub header_bytes: ::std::vec::Vec<u8>,
    pub header_signature: ::std::vec::Vec<u8>,
    pub message_bytes: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PbftSignedVote {
    fn default() -> &'a PbftSignedVote {
        <PbftSignedVote as ::protobuf::Message>::default_instance()
    }
}

impl PbftSignedVote {
    pub fn new() -> PbftSignedVote {
        ::std::default::Default::default()
    }

    // bytes header_bytes = 1;


    pub fn get_header_bytes(&self) -> &[u8] {
        &self.header_bytes
    }
    pub fn clear_header_bytes(&mut self) {
        self.header_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_header_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.header_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.header_bytes
    }

    // Take field
    pub fn take_header_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.header_bytes, ::std::vec::Vec::new())
    }

    // bytes header_signature = 2;


    pub fn get_header_signature(&self) -> &[u8] {
        &self.header_signature
    }
    pub fn clear_header_signature(&mut self) {
        self.header_signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_header_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.header_signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.header_signature
    }

    // Take field
    pub fn take_header_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.header_signature, ::std::vec::Vec::new())
    }

    // bytes message_bytes = 3;


    pub fn get_message_bytes(&self) -> &[u8] {
        &self.message_bytes
    }
    pub fn clear_message_bytes(&mut self) {
        self.message_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_message_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.message_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.message_bytes
    }

    // Take field
    pub fn take_message_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.message_bytes, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for PbftSignedVote {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.header_bytes)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.header_signature)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.message_bytes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.header_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.header_bytes);
        }
        if !self.header_signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.header_signature);
        }
        if !self.message_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.message_bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.header_bytes.is_empty() {
            os.write_bytes(1, &self.header_bytes)?;
        }
        if !self.header_signature.is_empty() {
            os.write_bytes(2, &self.header_signature)?;
        }
        if !self.message_bytes.is_empty() {
            os.write_bytes(3, &self.message_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PbftSignedVote {
        PbftSignedVote::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "header_bytes",
                |m: &PbftSignedVote| { &m.header_bytes },
                |m: &mut PbftSignedVote| { &mut m.header_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "header_signature",
                |m: &PbftSignedVote| { &m.header_signature },
                |m: &mut PbftSignedVote| { &mut m.header_signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "message_bytes",
                |m: &PbftSignedVote| { &m.message_bytes },
                |m: &mut PbftSignedVote| { &mut m.message_bytes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PbftSignedVote>(
                "PbftSignedVote",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PbftSignedVote {
        static instance: ::protobuf::rt::LazyV2<PbftSignedVote> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PbftSignedVote::new)
    }
}

impl ::protobuf::Clear for PbftSignedVote {
    fn clear(&mut self) {
        self.header_bytes.clear();
        self.header_signature.clear();
        self.message_bytes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PbftSignedVote {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PbftSignedVote {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PbftSeal {
    // message fields
    pub info: ::protobuf::SingularPtrField<PbftMessageInfo>,
    pub block_id: ::std::vec::Vec<u8>,
    pub commit_votes: ::protobuf::RepeatedField<PbftSignedVote>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PbftSeal {
    fn default() -> &'a PbftSeal {
        <PbftSeal as ::protobuf::Message>::default_instance()
    }
}

impl PbftSeal {
    pub fn new() -> PbftSeal {
        ::std::default::Default::default()
    }

    // .PbftMessageInfo info = 1;


    pub fn get_info(&self) -> &PbftMessageInfo {
        self.info.as_ref().unwrap_or_else(|| <PbftMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_info(&mut self) {
        self.info.clear();
    }

    pub fn has_info(&self) -> bool {
        self.info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_info(&mut self, v: PbftMessageInfo) {
        self.info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_info(&mut self) -> &mut PbftMessageInfo {
        if self.info.is_none() {
            self.info.set_default();
        }
        self.info.as_mut().unwrap()
    }

    // Take field
    pub fn take_info(&mut self) -> PbftMessageInfo {
        self.info.take().unwrap_or_else(|| PbftMessageInfo::new())
    }

    // bytes block_id = 2;


    pub fn get_block_id(&self) -> &[u8] {
        &self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.block_id
    }

    // Take field
    pub fn take_block_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.block_id, ::std::vec::Vec::new())
    }

    // repeated .PbftSignedVote commit_votes = 3;


    pub fn get_commit_votes(&self) -> &[PbftSignedVote] {
        &self.commit_votes
    }
    pub fn clear_commit_votes(&mut self) {
        self.commit_votes.clear();
    }

    // Param is passed by value, moved
    pub fn set_commit_votes(&mut self, v: ::protobuf::RepeatedField<PbftSignedVote>) {
        self.commit_votes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_commit_votes(&mut self) -> &mut ::protobuf::RepeatedField<PbftSignedVote> {
        &mut self.commit_votes
    }

    // Take field
    pub fn take_commit_votes(&mut self) -> ::protobuf::RepeatedField<PbftSignedVote> {
        ::std::mem::replace(&mut self.commit_votes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PbftSeal {
    fn is_initialized(&self) -> bool {
        for v in &self.info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.commit_votes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.info)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.block_id)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.commit_votes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.block_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.block_id);
        }
        for value in &self.commit_votes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.block_id.is_empty() {
            os.write_bytes(2, &self.block_id)?;
        }
        for v in &self.commit_votes {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PbftSeal {
        PbftSeal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PbftMessageInfo>>(
                "info",
                |m: &PbftSeal| { &m.info },
                |m: &mut PbftSeal| { &mut m.info },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "block_id",
                |m: &PbftSeal| { &m.block_id },
                |m: &mut PbftSeal| { &mut m.block_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PbftSignedVote>>(
                "commit_votes",
                |m: &PbftSeal| { &m.commit_votes },
                |m: &mut PbftSeal| { &mut m.commit_votes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PbftSeal>(
                "PbftSeal",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PbftSeal {
        static instance: ::protobuf::rt::LazyV2<PbftSeal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PbftSeal::new)
    }
}

impl ::protobuf::Clear for PbftSeal {
    fn clear(&mut self) {
        self.info.clear();
        self.block_id.clear();
        self.commit_votes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PbftSeal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PbftSeal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12pbft_message.proto\"\x80\x01\n\x0fPbftMessageInfo\x12\x1b\n\x08msg\
    _type\x18\x01\x20\x01(\tR\x07msgTypeB\0\x12\x14\n\x04view\x18\x02\x20\
    \x01(\x04R\x04viewB\0\x12\x19\n\x07seq_num\x18\x03\x20\x01(\x04R\x06seqN\
    umB\0\x12\x1d\n\tsigner_id\x18\x04\x20\x01(\x0cR\x08signerIdB\0:\0\"T\n\
    \x0bPbftMessage\x12&\n\x04info\x18\x01\x20\x01(\x0b2\x10.PbftMessageInfo\
    R\x04infoB\0\x12\x1b\n\x08block_id\x18\x02\x20\x01(\x0cR\x07blockIdB\0:\
    \0\"m\n\x0bPbftNewView\x12&\n\x04info\x18\x01\x20\x01(\x0b2\x10.PbftMess\
    ageInfoR\x04infoB\0\x124\n\x0cview_changes\x18\x02\x20\x03(\x0b2\x0f.Pbf\
    tSignedVoteR\x0bviewChangesB\0:\0\"\x8b\x01\n\x0ePbftSignedVote\x12#\n\
    \x0cheader_bytes\x18\x01\x20\x01(\x0cR\x0bheaderBytesB\0\x12+\n\x10heade\
    r_signature\x18\x02\x20\x01(\x0cR\x0fheaderSignatureB\0\x12%\n\rmessage_\
    bytes\x18\x03\x20\x01(\x0cR\x0cmessageBytesB\0:\0\"\x87\x01\n\x08PbftSea\
    l\x12&\n\x04info\x18\x01\x20\x01(\x0b2\x10.PbftMessageInfoR\x04infoB\0\
    \x12\x1b\n\x08block_id\x18\x02\x20\x01(\x0cR\x07blockIdB\0\x124\n\x0ccom\
    mit_votes\x18\x03\x20\x03(\x0b2\x0f.PbftSignedVoteR\x0bcommitVotesB\0:\0\
    B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
